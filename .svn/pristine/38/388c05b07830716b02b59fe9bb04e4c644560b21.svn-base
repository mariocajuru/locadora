package br.com.locadora.modelo;

// Generated 16/07/2014 14:11:25 by Hibernate Tools 4.0.0

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;

/**
 * Proprietario generated by hbm2java
 */
@Audited
@Entity
@Table(name = "PROPRIETARIO", catalog = "renovarsistemas")
@AuditTable(value="PROPRIETARIO", schema="log", catalog="renovarsistemas")
public class Proprietario implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5735396521213108097L;
	private ProprietarioId id;
	private Imovel imovel;
	private Pessoa pessoa;
	private String proObservacao;
	private Float proPorcentagem;
	private Boolean proPrimeiroImovel;
	private Date proDataInicio;
	private Date proDataFinal;
	private Boolean proAtivo;
	private Integer proDiaPagamentoFixo;

	public Proprietario() {
	}

	public Proprietario(ProprietarioId id, Imovel imovel, Pessoa pessoa) {
		this.id = id;
		this.imovel = imovel;
		this.pessoa = pessoa;
	}

	public Proprietario(ProprietarioId id, Imovel imovel, Pessoa pessoa,
			String proObservacao, Float proPorcentagem,
			Boolean proPrimeiroImovel, Date proDataInicio, Date proDataFinal,
			Boolean proAtivo,Integer proDiaPagamentoFixo) {
		this.id = id;
		this.imovel = imovel;
		this.pessoa = pessoa;
		this.proObservacao = proObservacao;
		this.proPorcentagem = proPorcentagem;
		this.proPrimeiroImovel = proPrimeiroImovel;
		this.proDataInicio = proDataInicio;
		this.proDataFinal = proDataFinal;
		this.proAtivo = proAtivo;
		this.proDiaPagamentoFixo=proDiaPagamentoFixo;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "imoId", column = @Column(name = "IMO_ID", nullable = false)),
			@AttributeOverride(name = "pesId", column = @Column(name = "PES_ID", nullable = false)) })
	public ProprietarioId getId() {
		return this.id;
	}

	public void setId(ProprietarioId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IMO_ID", nullable = false, insertable = false, updatable = false)
	public Imovel getImovel() {
		return this.imovel;
	}

	public void setImovel(Imovel imovel) {
		this.imovel = imovel;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PES_ID", nullable = false, insertable = false, updatable = false)
	public Pessoa getPessoa() {
		return this.pessoa;
	}

	public void setPessoa(Pessoa pessoa) {
		this.pessoa = pessoa;
	}

	@Column(name = "PRO_OBSERVACAO", length = 200)
	public String getProObservacao() {
		return this.proObservacao;
	}

	public void setProObservacao(String proObservacao) {
		this.proObservacao = proObservacao;
	}

	@Column(name = "PRO_PORCENTAGEM", precision = 24, scale = 0)
	public Float getProPorcentagem() {
		return this.proPorcentagem;
	}

	public void setProPorcentagem(Float proPorcentagem) {
		this.proPorcentagem = proPorcentagem;
	}

	@Column(name = "PRO_PRIMEIRO_IMOVEL")
	public Boolean getProPrimeiroImovel() {
		return this.proPrimeiroImovel;
	}

	public void setProPrimeiroImovel(Boolean proPrimeiroImovel) {
		this.proPrimeiroImovel = proPrimeiroImovel;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PRO_DATA_INICIO", length = 23)
	public Date getProDataInicio() {
		return this.proDataInicio;
	}

	public void setProDataInicio(Date proDataInicio) {
		this.proDataInicio = proDataInicio;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PRO_DATA_FINAL", length = 23)
	public Date getProDataFinal() {
		return this.proDataFinal;
	}

	public void setProDataFinal(Date proDataFinal) {
		this.proDataFinal = proDataFinal;
	}
	@Column(name = "PRO_DIA_PAGAMENTO_FIXO")
	public Integer getProDiaPagamentoFixo() {
		return proDiaPagamentoFixo;
	}

	public void setProDiaPagamentoFixo(Integer proDiaPagamentoFixo) {
		this.proDiaPagamentoFixo = proDiaPagamentoFixo;
	}

	@Column(name = "PRO_ATIVO")
	public Boolean getProAtivo() {
		return this.proAtivo;
	}

	public void setProAtivo(Boolean proAtivo) {
		this.proAtivo = proAtivo;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((imovel == null) ? 0 : imovel.hashCode());
		result = prime * result + ((pessoa == null) ? 0 : pessoa.hashCode());
		result = prime * result
				+ ((proAtivo == null) ? 0 : proAtivo.hashCode());
		result = prime * result
				+ ((proDataFinal == null) ? 0 : proDataFinal.hashCode());
		result = prime * result
				+ ((proDataInicio == null) ? 0 : proDataInicio.hashCode());
		result = prime
				* result
				+ ((proDiaPagamentoFixo == null) ? 0 : proDiaPagamentoFixo
						.hashCode());
		result = prime * result
				+ ((proObservacao == null) ? 0 : proObservacao.hashCode());
		result = prime * result
				+ ((proPorcentagem == null) ? 0 : proPorcentagem.hashCode());
		result = prime
				* result
				+ ((proPrimeiroImovel == null) ? 0 : proPrimeiroImovel
						.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Proprietario other = (Proprietario) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (imovel == null) {
			if (other.imovel != null)
				return false;
		} else if (!imovel.equals(other.imovel))
			return false;
		if (pessoa == null) {
			if (other.pessoa != null)
				return false;
		} else if (!pessoa.equals(other.pessoa))
			return false;
		if (proAtivo == null) {
			if (other.proAtivo != null)
				return false;
		} else if (!proAtivo.equals(other.proAtivo))
			return false;
		if (proDataFinal == null) {
			if (other.proDataFinal != null)
				return false;
		} else if (!proDataFinal.equals(other.proDataFinal))
			return false;
		if (proDataInicio == null) {
			if (other.proDataInicio != null)
				return false;
		} else if (!proDataInicio.equals(other.proDataInicio))
			return false;
		if (proDiaPagamentoFixo == null) {
			if (other.proDiaPagamentoFixo != null)
				return false;
		} else if (!proDiaPagamentoFixo.equals(other.proDiaPagamentoFixo))
			return false;
		if (proObservacao == null) {
			if (other.proObservacao != null)
				return false;
		} else if (!proObservacao.equals(other.proObservacao))
			return false;
		if (proPorcentagem == null) {
			if (other.proPorcentagem != null)
				return false;
		} else if (!proPorcentagem.equals(other.proPorcentagem))
			return false;
		if (proPrimeiroImovel == null) {
			if (other.proPrimeiroImovel != null)
				return false;
		} else if (!proPrimeiroImovel.equals(other.proPrimeiroImovel))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Proprietario [id=" + id + "]";
	}

}
