package br.com.locadora.modelo;

// Generated 26/05/2014 08:49:28 by Hibernate Tools 4.0.0

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;

/**
 * Proposta generated by hbm2java
 */
@Audited
@Entity
@Table(name = "PROPOSTA", catalog = "renovarsistemas")
@AuditTable(value="PROPOSTA", schema="log", catalog="renovarsistemas")
public class Proposta implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7438120218823365799L;
	private int proId;
	private Imovel imovel;
	private Funcionario funcionario;
	private Pessoa pessoa;
	private Double proValorProprietario;
	private Double proValorInquilino;
	private Date proDataProposta;
	private Boolean proProprietario;
	private Boolean proInquilino;
	private Boolean proAceita;
	private Boolean proHouveContato;
	private int proIdAtendente;
	private Boolean proVenda;
	private Boolean proLocacao;

	public Proposta() {
	}

	public Proposta(int proId, Imovel imovel, Pessoa pessoa, int proIdAtendente) {
		this.proId = proId;
		this.imovel = imovel;
		this.pessoa = pessoa;
		this.proIdAtendente = proIdAtendente;
	}

	public Proposta(int proId, Imovel imovel, Funcionario funcionario,
			Pessoa pessoa, Double proValorProprietario, Double proValorInquilino, Date proDataProposta,
			Boolean proProprietario, Boolean proInquilino, Boolean proAceita,
			Boolean proHouveContato, int proIdAtendente, Boolean proVenda,
			Boolean proLocacao) {
		this.proId = proId;
		this.imovel = imovel;
		this.funcionario = funcionario;
		this.pessoa = pessoa;
		this.proValorInquilino= proValorInquilino;
		this.proValorProprietario = proValorProprietario;
		this.proDataProposta = proDataProposta;
		this.proProprietario = proProprietario;
		this.proInquilino = proInquilino;
		this.proAceita = proAceita;
		this.proHouveContato = proHouveContato;
		this.proIdAtendente = proIdAtendente;
		this.proVenda = proVenda;
		this.proLocacao = proLocacao;
	}

	@Id
	@GeneratedValue
	@Column(name = "PRO_ID", unique = true, nullable = false)
	public int getProId() {
		return this.proId;
	}


	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public void setProId(int proId) {
		this.proId = proId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IMO_ID", nullable = false)
	public Imovel getImovel() {
		return this.imovel;
	}

	public void setImovel(Imovel imovel) {
		this.imovel = imovel;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FUN_PES_ID")
	public Funcionario getFuncionario() {
		return this.funcionario;
	}

	public void setFuncionario(Funcionario funcionario) {
		this.funcionario = funcionario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PES_ID", nullable = false)
	public Pessoa getPessoa() {
		return this.pessoa;
	}

	public void setPessoa(Pessoa pessoa) {
		this.pessoa = pessoa;
	}
	
	@Column(name = "PRO_VALOR_INQUILINO", precision = 53, scale = 0)
	public Double getProValorInquilino() {
		return this.proValorInquilino;
	}

	public void setProValorInquilino(Double proValorInquilino) {
		this.proValorInquilino = proValorInquilino;
	}

	@Column(name = "PRO_VALOR_PROPRIETARIO", precision = 53, scale = 0)
	public Double getProValorProprietario() {
		return this.proValorProprietario;
	}

	public void setProValorProprietario(Double proValorProprietario) {
		this.proValorProprietario = proValorProprietario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PRO_DATA_PROPOSTA", length = 23)
	public Date getProDataProposta() {
		return this.proDataProposta;
	}

	public void setProDataProposta(Date proDataProposta) {
		this.proDataProposta = proDataProposta;
	}

	@Column(name = "PRO_PROPRIETARIO")
	public Boolean getProProprietario() {
		return this.proProprietario;
	}

	public void setProProprietario(Boolean proProprietario) {
		this.proProprietario = proProprietario;
	}

	@Column(name = "PRO_INQUILINO_")
	public Boolean getProInquilino() {
		return this.proInquilino;
	}

	public void setProInquilino(Boolean proInquilino) {
		this.proInquilino = proInquilino;
	}

	@Column(name = "PRO_ACEITA")
	public Boolean getProAceita() {
		return this.proAceita;
	}

	public void setProAceita(Boolean proAceita) {
		this.proAceita = proAceita;
	}

	@Column(name = "PRO_HOUVE_CONTATO")
	public Boolean getProHouveContato() {
		return this.proHouveContato;
	}

	public void setProHouveContato(Boolean proHouveContato) {
		this.proHouveContato = proHouveContato;
	}

	@Column(name = "PRO_ID_ATENDENTE", nullable = false)
	public int getProIdAtendente() {
		return this.proIdAtendente;
	}

	public void setProIdAtendente(int proIdAtendente) {
		this.proIdAtendente = proIdAtendente;
	}

	@Column(name = "PRO_VENDA")
	public Boolean getProVenda() {
		return this.proVenda;
	}

	public void setProVenda(Boolean proVenda) {
		this.proVenda = proVenda;
	}

	@Column(name = "PRO_LOCACAO")
	public Boolean getProLocacao() {
		return this.proLocacao;
	}

	public void setProLocacao(Boolean proLocacao) {
		this.proLocacao = proLocacao;
	}

	@Override
	public String toString() {
		return "Proposta [proId=" + proId + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((funcionario == null) ? 0 : funcionario.hashCode());
		result = prime * result + ((imovel == null) ? 0 : imovel.hashCode());
		result = prime * result + ((pessoa == null) ? 0 : pessoa.hashCode());
		result = prime * result
				+ ((proAceita == null) ? 0 : proAceita.hashCode());
		result = prime * result
				+ ((proDataProposta == null) ? 0 : proDataProposta.hashCode());
		result = prime * result
				+ ((proHouveContato == null) ? 0 : proHouveContato.hashCode());
		result = prime * result + proId;
		result = prime * result + proIdAtendente;
		result = prime * result
				+ ((proInquilino == null) ? 0 : proInquilino.hashCode());
		result = prime * result
				+ ((proLocacao == null) ? 0 : proLocacao.hashCode());
		result = prime * result
				+ ((proProprietario == null) ? 0 : proProprietario.hashCode());
		result = prime
				* result
				+ ((proValorInquilino == null) ? 0 : proValorInquilino
						.hashCode());
		result = prime
				* result
				+ ((proValorProprietario == null) ? 0 : proValorProprietario
						.hashCode());
		result = prime * result
				+ ((proVenda == null) ? 0 : proVenda.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Proposta other = (Proposta) obj;
		if (funcionario == null) {
			if (other.funcionario != null)
				return false;
		} else if (!funcionario.equals(other.funcionario))
			return false;
		if (imovel == null) {
			if (other.imovel != null)
				return false;
		} else if (!imovel.equals(other.imovel))
			return false;
		if (pessoa == null) {
			if (other.pessoa != null)
				return false;
		} else if (!pessoa.equals(other.pessoa))
			return false;
		if (proAceita == null) {
			if (other.proAceita != null)
				return false;
		} else if (!proAceita.equals(other.proAceita))
			return false;
		if (proDataProposta == null) {
			if (other.proDataProposta != null)
				return false;
		} else if (!proDataProposta.equals(other.proDataProposta))
			return false;
		if (proHouveContato == null) {
			if (other.proHouveContato != null)
				return false;
		} else if (!proHouveContato.equals(other.proHouveContato))
			return false;
		if (proId != other.proId)
			return false;
		if (proIdAtendente != other.proIdAtendente)
			return false;
		if (proInquilino == null) {
			if (other.proInquilino != null)
				return false;
		} else if (!proInquilino.equals(other.proInquilino))
			return false;
		if (proLocacao == null) {
			if (other.proLocacao != null)
				return false;
		} else if (!proLocacao.equals(other.proLocacao))
			return false;
		if (proProprietario == null) {
			if (other.proProprietario != null)
				return false;
		} else if (!proProprietario.equals(other.proProprietario))
			return false;
		if (proValorInquilino == null) {
			if (other.proValorInquilino != null)
				return false;
		} else if (!proValorInquilino.equals(other.proValorInquilino))
			return false;
		if (proValorProprietario == null) {
			if (other.proValorProprietario != null)
				return false;
		} else if (!proValorProprietario.equals(other.proValorProprietario))
			return false;
		if (proVenda == null) {
			if (other.proVenda != null)
				return false;
		} else if (!proVenda.equals(other.proVenda))
			return false;
		return true;
	}

}
