package br.com.locadora.modelo;

// Generated 15/08/2014 10:36:04 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;

/**
 * Pessoa generated by hbm2java
 */
@Audited
@Entity
@Table(name = "PESSOA", catalog = "renovarsistemas")
@AuditTable(value="PESSOA", schema="log", catalog="renovarsistemas")
public class Pessoa implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8013156909169791013L;
	private int pesId;
	private Ramoatuacao ramoatuacao;
	private Funcionario funcionario;
	private Endereco endereco;
	private DadosBancariosProprietario dadosBancariosProprietario;
	private String pesNome;
	private Date pesDataCadastro;
	private String pesObservacao;
	private Integer pesQtdVeiculo;
	private Integer pesFaturamento;
	private Character pesTipo;
	private String pesIm;
	private String pesCpfCnpj;
	private String pesRgIe;
	private Date pesDataNasc;
	private String pesFoto;
	private Integer pesQtdFilho;
	private String pesProfissao;
	private String pesNacionalidade;
	private Character pesEstadoCivil;
	private Character pesSexo;
	private String pesNomeFantasiaApelido;
	private Boolean pesProprietario;
	private Boolean pesInquilino;
	private Boolean pesFiador;
	private Boolean pesFuncionario;
	private Boolean pesPreCadastro;
	private Boolean pesLocatarioSolidario;
	private String pesConjugue;
	private String pesConjugueCpf;
	private String pesConjugueRg;
	private Date pesDataAtualizacao;
	private String pesNaturalidade;
	private String pesTipoLocatario;
	private Boolean pesEnderecoCorrespondencia;
	private Integer pesIdEnderecoCorrespondencia; 
	private Set<Telefone> telefones = new HashSet<Telefone>(0);
	private Set<Proprietario> proprietarios = new HashSet<Proprietario>(0);
	private Set<Fiador> fiadors = new HashSet<Fiador>(0);
	private Set<Endereco> enderecos = new HashSet<Endereco>(0);
	private Set<HistoricoPessoa> historicoPessoas = new HashSet<HistoricoPessoa>(
			0);
	private Set<ImovelDesejado> imovelDesejados = new HashSet<ImovelDesejado>(0);
	private Set<Locacao> locacaos = new HashSet<Locacao>(0);
	private Set<Proposta> propostas = new HashSet<Proposta>(0);
	private Set<Referenciapessoal> referenciapessoals = new HashSet<Referenciapessoal>(
			0);
	private Set<Email> emails = new HashSet<Email>(0);
	private Set<ContaCorrente> contaCorrentes = new HashSet<ContaCorrente>(0);
	private Set<EmprestimoChave> emprestimoChaves = new HashSet<EmprestimoChave>(
			0);

	public Pessoa() {
	}

	public Pessoa(int pesId, String pesNome) {
		this.pesId = pesId;
		this.pesNome = pesNome;
	}

	public Pessoa(int pesId, Ramoatuacao ramoatuacao, Funcionario funcionario,
			Endereco endereco,
			DadosBancariosProprietario dadosBancariosProprietario,
			String pesNome, Date pesDataCadastro, String pesObservacao,
			Integer pesQtdVeiculo, Integer pesFaturamento, Character pesTipo,
			String pesIm, String pesCpfCnpj, String pesRgIe, Date pesDataNasc,
			String pesFoto, Integer pesQtdFilho, String pesProfissao,
			String pesNacionalidade, Character pesEstadoCivil,Boolean pesLocatarioSolidario,
			Character pesSexo, String pesNomeFantasiaApelido,
			Boolean pesProprietario, Boolean pesInquilino, Boolean pesFiador,
			Boolean pesFuncionario, Boolean pesPreCadastro, String pesConjugue,
			String pesConjugueCpf, String pesConjugueRg,Boolean pesEnderecoCorrespondencia,Integer pesIdEnderecoCorrespondencia,
			Date pesDataAtualizacao, String pesNaturalidade,
			String pesTipoLocatario, Set<Telefone> telefones,
			Set<Proprietario> proprietarios, Set<Fiador> fiadors,
			Set<Endereco> enderecos, Set<HistoricoPessoa> historicoPessoas,
			Set<ImovelDesejado> imovelDesejados, Set<Locacao> locacaos,
			Set<Proposta> propostas, Set<Referenciapessoal> referenciapessoals,
			 Set<Email> emails,
			Set<ContaCorrente> contaCorrentes,
			Set<EmprestimoChave> emprestimoChaves) {
		this.pesId = pesId;
		this.ramoatuacao = ramoatuacao;
		this.funcionario = funcionario;
		this.endereco = endereco;
		this.pesEnderecoCorrespondencia=pesEnderecoCorrespondencia;
		this.pesIdEnderecoCorrespondencia=pesIdEnderecoCorrespondencia;
		this.dadosBancariosProprietario = dadosBancariosProprietario;
		this.pesNome = pesNome;
		this.pesDataCadastro = pesDataCadastro;
		this.pesObservacao = pesObservacao;
		this.pesQtdVeiculo = pesQtdVeiculo;
		this.pesFaturamento = pesFaturamento;
		this.pesTipo = pesTipo;
		this.pesIm = pesIm;
		this.pesCpfCnpj = pesCpfCnpj;
		this.pesRgIe = pesRgIe;
		this.pesDataNasc = pesDataNasc;
		this.pesFoto = pesFoto;
		this.pesQtdFilho = pesQtdFilho;
		this.pesProfissao = pesProfissao;
		this.pesNacionalidade = pesNacionalidade;
		this.pesEstadoCivil = pesEstadoCivil;
		this.pesSexo = pesSexo;
		this.pesNomeFantasiaApelido = pesNomeFantasiaApelido;
		this.pesProprietario = pesProprietario;
		this.pesInquilino = pesInquilino;
		this.pesFiador = pesFiador;
		this.pesFuncionario = pesFuncionario;
		this.pesPreCadastro = pesPreCadastro;
		this.pesConjugue = pesConjugue;
		this.pesConjugueCpf = pesConjugueCpf;
		this.pesConjugueRg = pesConjugueRg;
		this.pesDataAtualizacao = pesDataAtualizacao;
		this.pesNaturalidade = pesNaturalidade;
		this.pesTipoLocatario = pesTipoLocatario;
		this.telefones = telefones;
		this.pesLocatarioSolidario=pesLocatarioSolidario;
		this.proprietarios = proprietarios;
		this.fiadors = fiadors;
		this.enderecos = enderecos;
		this.historicoPessoas = historicoPessoas;
		this.imovelDesejados = imovelDesejados;
		this.locacaos = locacaos;
		this.propostas = propostas;
		this.referenciapessoals = referenciapessoals;
		this.emails = emails;
		this.contaCorrentes = contaCorrentes;
		this.emprestimoChaves = emprestimoChaves;
	}

	@Id
	@GeneratedValue
	@Column(name = "PES_ID", unique = true, nullable = false)
	public int getPesId() {
		return this.pesId;
	}

	public void setPesId(int pesId) {
		this.pesId = pesId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "RAM_ID")
	public Ramoatuacao getRamoatuacao() {
		return this.ramoatuacao;
	}

	public void setRamoatuacao(Ramoatuacao ramoatuacao) {
		this.ramoatuacao = ramoatuacao;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "pessoa")
	public Funcionario getFuncionario() {
		return this.funcionario;
	}

	public void setFuncionario(Funcionario funcionario) {
		this.funcionario = funcionario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "END_ID")
	public Endereco getEndereco() {
		return this.endereco;
	}

	public void setEndereco(Endereco endereco) {
		this.endereco = endereco;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DAD_BAN_PRO_ID")
	public DadosBancariosProprietario getDadosBancariosProprietario() {
		return this.dadosBancariosProprietario;
	}

	public void setDadosBancariosProprietario(
			DadosBancariosProprietario dadosBancariosProprietario) {
		this.dadosBancariosProprietario = dadosBancariosProprietario;
	}

	@Column(name = "PES_NOME", nullable = false, length = 150)
	public String getPesNome() {
		return this.pesNome;
	}

	public void setPesNome(String pesNome) {
		this.pesNome = pesNome;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PES_DATA_CADASTRO", length = 23)
	public Date getPesDataCadastro() {
		return this.pesDataCadastro;
	}

	public void setPesDataCadastro(Date pesDataCadastro) {
		this.pesDataCadastro = pesDataCadastro;
	}

	@Column(name = "PES_OBSERVACAO", length = 201)
	public String getPesObservacao() {
		return this.pesObservacao;
	}

	public void setPesObservacao(String pesObservacao) {
		this.pesObservacao = pesObservacao;
	}

	@Column(name = "PES_QTD_VEICULO")
	public Integer getPesQtdVeiculo() {
		return this.pesQtdVeiculo;
	}

	public void setPesQtdVeiculo(Integer pesQtdVeiculo) {
		this.pesQtdVeiculo = pesQtdVeiculo;
	}

	@Column(name = "PES_FATURAMENTO")
	public Integer getPesFaturamento() {
		return this.pesFaturamento;
	}

	public void setPesFaturamento(Integer pesFaturamento) {
		this.pesFaturamento = pesFaturamento;
	}
	@Column(name = "PES_ENDERECO_CORRESPONDENCIA")
	public Boolean getPesEnderecoCorrespondencia() {
		return pesEnderecoCorrespondencia;
	}

	public void setPesEnderecoCorrespondencia(Boolean pesEnderecoCorrespondencia) {
		this.pesEnderecoCorrespondencia = pesEnderecoCorrespondencia;
	}
	@Column(name = "PES_ID_ENDERECO_CORRESPONDENCIA")
	public Integer getPesIdEnderecoCorrespondencia() {
		return pesIdEnderecoCorrespondencia;
	}

	public void setPesIdEnderecoCorrespondencia(Integer pesIdEnderecoCorrespondencia) {
		this.pesIdEnderecoCorrespondencia = pesIdEnderecoCorrespondencia;
	}

	@Column(name = "PES_TIPO", length = 1)
	public Character getPesTipo() {
		return this.pesTipo;
	}

	public void setPesTipo(Character pesTipo) {
		this.pesTipo = pesTipo;
	}

	@Column(name = "PES_IM", length = 15)
	public String getPesIm() {
		return this.pesIm;
	}

	public void setPesIm(String pesIm) {
		this.pesIm = pesIm;
	}

	@Column(name = "PES_CPF_CNPJ", length = 14)
	public String getPesCpfCnpj() {
		return this.pesCpfCnpj;
	}

	public void setPesCpfCnpj(String pesCpfCnpj) {
		this.pesCpfCnpj = pesCpfCnpj;
	}

	@Column(name = "PES_RG_IE", length = 18)
	public String getPesRgIe() {
		return this.pesRgIe;
	}

	public void setPesRgIe(String pesRgIe) {
		this.pesRgIe = pesRgIe;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PES_DATA_NASC", length = 23)
	public Date getPesDataNasc() {
		return this.pesDataNasc;
	}

	public void setPesDataNasc(Date pesDataNasc) {
		this.pesDataNasc = pesDataNasc;
	}

	@Column(name = "PES_FOTO", length = 200)
	public String getPesFoto() {
		return this.pesFoto;
	}

	public void setPesFoto(String pesFoto) {
		this.pesFoto = pesFoto;
	}

	@Column(name = "PES_QTD_FILHO")
	public Integer getPesQtdFilho() {
		return this.pesQtdFilho;
	}

	public void setPesQtdFilho(Integer pesQtdFilho) {
		this.pesQtdFilho = pesQtdFilho;
	}

	@Column(name = "PES_PROFISSAO", length = 20)
	public String getPesProfissao() {
		return this.pesProfissao;
	}

	public void setPesProfissao(String pesProfissao) {
		this.pesProfissao = pesProfissao;
	}

	@Column(name = "PES_NACIONALIDADE", length = 20)
	public String getPesNacionalidade() {
		return this.pesNacionalidade;
	}

	public void setPesNacionalidade(String pesNacionalidade) {
		this.pesNacionalidade = pesNacionalidade;
	}

	@Column(name = "PES_ESTADO_CIVIL", length = 1)
	public Character getPesEstadoCivil() {
		return this.pesEstadoCivil;
	}

	public void setPesEstadoCivil(Character pesEstadoCivil) {
		this.pesEstadoCivil = pesEstadoCivil;
	}

	@Column(name = "PES_SEXO", length = 1)
	public Character getPesSexo() {
		return this.pesSexo;
	}

	public void setPesSexo(Character pesSexo) {
		this.pesSexo = pesSexo;
	}

	@Column(name = "PES_NOME_FANTASIA_APELIDO", length = 130)
	public String getPesNomeFantasiaApelido() {
		return this.pesNomeFantasiaApelido;
	}

	public void setPesNomeFantasiaApelido(String pesNomeFantasiaApelido) {
		this.pesNomeFantasiaApelido = pesNomeFantasiaApelido;
	}

	@Column(name = "PES_PROPRIETARIO")
	public Boolean getPesProprietario() {
		return this.pesProprietario;
	}

	public void setPesProprietario(Boolean pesProprietario) {
		this.pesProprietario = pesProprietario;
	}

	@Column(name = "PES_INQUILINO")
	public Boolean getPesInquilino() {
		return this.pesInquilino;
	}

	public void setPesInquilino(Boolean pesInquilino) {
		this.pesInquilino = pesInquilino;
	}

	@Column(name = "PES_FIADOR")
	public Boolean getPesFiador() {
		return this.pesFiador;
	}

	public void setPesFiador(Boolean pesFiador) {
		this.pesFiador = pesFiador;
	}

	@Column(name = "PES_FUNCIONARIO")
	public Boolean getPesFuncionario() {
		return this.pesFuncionario;
	}

	public void setPesFuncionario(Boolean pesFuncionario) {
		this.pesFuncionario = pesFuncionario;
	}
	
	@Column(name = "PES_LOCATARIO_SOLIDARIO")
	public Boolean getPesLocatarioSolidario() {
		return pesLocatarioSolidario;
	}

	public void setPesLocatarioSolidario(Boolean pesLocatarioSolidario) {
		this.pesLocatarioSolidario = pesLocatarioSolidario;
	}

	@Column(name = "PES_PRE_CADASTRO")
	public Boolean getPesPreCadastro() {
		return this.pesPreCadastro;
	}

	public void setPesPreCadastro(Boolean pesPreCadastro) {
		this.pesPreCadastro = pesPreCadastro;
	}

	@Column(name = "PES_CONJUGUE", length = 80)
	public String getPesConjugue() {
		return this.pesConjugue;
	}

	public void setPesConjugue(String pesConjugue) {
		this.pesConjugue = pesConjugue;
	}

	@Column(name = "PES_CONJUGUE_CPF", length = 14)
	public String getPesConjugueCpf() {
		return this.pesConjugueCpf;
	}

	public void setPesConjugueCpf(String pesConjugueCpf) {
		this.pesConjugueCpf = pesConjugueCpf;
	}

	@Column(name = "PES_CONJUGUE_RG", length = 18)
	public String getPesConjugueRg() {
		return this.pesConjugueRg;
	}

	public void setPesConjugueRg(String pesConjugueRg) {
		this.pesConjugueRg = pesConjugueRg;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PES_DATA_ATUALIZACAO", length = 23)
	public Date getPesDataAtualizacao() {
		return this.pesDataAtualizacao;
	}

	public void setPesDataAtualizacao(Date pesDataAtualizacao) {
		this.pesDataAtualizacao = pesDataAtualizacao;
	}

	@Column(name = "PES_NATURALIDADE", length = 150)
	public String getPesNaturalidade() {
		return this.pesNaturalidade;
	}

	public void setPesNaturalidade(String pesNaturalidade) {
		this.pesNaturalidade = pesNaturalidade;
	}

	@Column(name = "PES_TIPO_LOCATARIO", length = 10)
	public String getPesTipoLocatario() {
		return this.pesTipoLocatario;
	}

	public void setPesTipoLocatario(String pesTipoLocatario) {
		this.pesTipoLocatario = pesTipoLocatario;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Telefone> getTelefones() {
		return this.telefones;
	}

	public void setTelefones(Set<Telefone> telefones) {
		this.telefones = telefones;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Proprietario> getProprietarios() {
		return this.proprietarios;
	}

	public void setProprietarios(Set<Proprietario> proprietarios) {
		this.proprietarios = proprietarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Fiador> getFiadors() {
		return this.fiadors;
	}

	public void setFiadors(Set<Fiador> fiadors) {
		this.fiadors = fiadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Endereco> getEnderecos() {
		return this.enderecos;
	}

	public void setEnderecos(Set<Endereco> enderecos) {
		this.enderecos = enderecos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<HistoricoPessoa> getHistoricoPessoas() {
		return this.historicoPessoas;
	}

	public void setHistoricoPessoas(Set<HistoricoPessoa> historicoPessoas) {
		this.historicoPessoas = historicoPessoas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<ImovelDesejado> getImovelDesejados() {
		return this.imovelDesejados;
	}

	public void setImovelDesejados(Set<ImovelDesejado> imovelDesejados) {
		this.imovelDesejados = imovelDesejados;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Locacao> getLocacaos() {
		return this.locacaos;
	}

	public void setLocacaos(Set<Locacao> locacaos) {
		this.locacaos = locacaos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Proposta> getPropostas() {
		return this.propostas;
	}

	public void setPropostas(Set<Proposta> propostas) {
		this.propostas = propostas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Referenciapessoal> getReferenciapessoals() {
		return this.referenciapessoals;
	}

	public void setReferenciapessoals(Set<Referenciapessoal> referenciapessoals) {
		this.referenciapessoals = referenciapessoals;
	}

	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<Email> getEmails() {
		return this.emails;
	}

	public void setEmails(Set<Email> emails) {
		this.emails = emails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<ContaCorrente> getContaCorrentes() {
		return this.contaCorrentes;
	}

	public void setContaCorrentes(Set<ContaCorrente> contaCorrentes) {
		this.contaCorrentes = contaCorrentes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pessoa")
	@NotAudited
	public Set<EmprestimoChave> getEmprestimoChaves() {
		return this.emprestimoChaves;
	}

	public void setEmprestimoChaves(Set<EmprestimoChave> emprestimoChaves) {
		this.emprestimoChaves = emprestimoChaves;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}



	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((contaCorrentes == null) ? 0 : contaCorrentes.hashCode());
		result = prime
				* result
				+ ((dadosBancariosProprietario == null) ? 0
						: dadosBancariosProprietario.hashCode());
		result = prime * result + ((emails == null) ? 0 : emails.hashCode());
		result = prime
				* result
				+ ((emprestimoChaves == null) ? 0 : emprestimoChaves.hashCode());
		result = prime * result
				+ ((endereco == null) ? 0 : endereco.hashCode());
		result = prime * result
				+ ((enderecos == null) ? 0 : enderecos.hashCode());
		result = prime * result + ((fiadors == null) ? 0 : fiadors.hashCode());
		result = prime * result
				+ ((funcionario == null) ? 0 : funcionario.hashCode());
		result = prime
				* result
				+ ((historicoPessoas == null) ? 0 : historicoPessoas.hashCode());
		result = prime * result
				+ ((imovelDesejados == null) ? 0 : imovelDesejados.hashCode());
		result = prime * result
				+ ((locacaos == null) ? 0 : locacaos.hashCode());
		result = prime * result
				+ ((pesConjugue == null) ? 0 : pesConjugue.hashCode());
		result = prime * result
				+ ((pesConjugueCpf == null) ? 0 : pesConjugueCpf.hashCode());
		result = prime * result
				+ ((pesConjugueRg == null) ? 0 : pesConjugueRg.hashCode());
		result = prime * result
				+ ((pesCpfCnpj == null) ? 0 : pesCpfCnpj.hashCode());
		result = prime
				* result
				+ ((pesDataAtualizacao == null) ? 0 : pesDataAtualizacao
						.hashCode());
		result = prime * result
				+ ((pesDataCadastro == null) ? 0 : pesDataCadastro.hashCode());
		result = prime * result
				+ ((pesDataNasc == null) ? 0 : pesDataNasc.hashCode());
		result = prime
				* result
				+ ((pesEnderecoCorrespondencia == null) ? 0
						: pesEnderecoCorrespondencia.hashCode());
		result = prime * result
				+ ((pesEstadoCivil == null) ? 0 : pesEstadoCivil.hashCode());
		result = prime * result
				+ ((pesFaturamento == null) ? 0 : pesFaturamento.hashCode());
		result = prime * result
				+ ((pesFiador == null) ? 0 : pesFiador.hashCode());
		result = prime * result + ((pesFoto == null) ? 0 : pesFoto.hashCode());
		result = prime * result
				+ ((pesFuncionario == null) ? 0 : pesFuncionario.hashCode());
		result = prime * result + pesId;
		result = prime
				* result
				+ ((pesIdEnderecoCorrespondencia == null) ? 0
						: pesIdEnderecoCorrespondencia.hashCode());
		result = prime * result + ((pesIm == null) ? 0 : pesIm.hashCode());
		result = prime * result
				+ ((pesInquilino == null) ? 0 : pesInquilino.hashCode());
		result = prime
				* result
				+ ((pesLocatarioSolidario == null) ? 0 : pesLocatarioSolidario
						.hashCode());
		result = prime
				* result
				+ ((pesNacionalidade == null) ? 0 : pesNacionalidade.hashCode());
		result = prime * result
				+ ((pesNaturalidade == null) ? 0 : pesNaturalidade.hashCode());
		result = prime * result + ((pesNome == null) ? 0 : pesNome.hashCode());
		result = prime
				* result
				+ ((pesNomeFantasiaApelido == null) ? 0
						: pesNomeFantasiaApelido.hashCode());
		result = prime * result
				+ ((pesObservacao == null) ? 0 : pesObservacao.hashCode());
		result = prime * result
				+ ((pesPreCadastro == null) ? 0 : pesPreCadastro.hashCode());
		result = prime * result
				+ ((pesProfissao == null) ? 0 : pesProfissao.hashCode());
		result = prime * result
				+ ((pesProprietario == null) ? 0 : pesProprietario.hashCode());
		result = prime * result
				+ ((pesQtdFilho == null) ? 0 : pesQtdFilho.hashCode());
		result = prime * result
				+ ((pesQtdVeiculo == null) ? 0 : pesQtdVeiculo.hashCode());
		result = prime * result + ((pesRgIe == null) ? 0 : pesRgIe.hashCode());
		result = prime * result + ((pesSexo == null) ? 0 : pesSexo.hashCode());
		result = prime * result + ((pesTipo == null) ? 0 : pesTipo.hashCode());
		result = prime
				* result
				+ ((pesTipoLocatario == null) ? 0 : pesTipoLocatario.hashCode());
		result = prime * result
				+ ((propostas == null) ? 0 : propostas.hashCode());
		result = prime * result
				+ ((proprietarios == null) ? 0 : proprietarios.hashCode());
		result = prime * result
				+ ((ramoatuacao == null) ? 0 : ramoatuacao.hashCode());
		result = prime
				* result
				+ ((referenciapessoals == null) ? 0 : referenciapessoals
						.hashCode());
		result = prime * result
				+ ((telefones == null) ? 0 : telefones.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Pessoa other = (Pessoa) obj;
		if (contaCorrentes == null) {
			if (other.contaCorrentes != null)
				return false;
		} else if (!contaCorrentes.equals(other.contaCorrentes))
			return false;
		if (dadosBancariosProprietario == null) {
			if (other.dadosBancariosProprietario != null)
				return false;
		} else if (!dadosBancariosProprietario
				.equals(other.dadosBancariosProprietario))
			return false;
		if (emails == null) {
			if (other.emails != null)
				return false;
		} else if (!emails.equals(other.emails))
			return false;
		if (emprestimoChaves == null) {
			if (other.emprestimoChaves != null)
				return false;
		} else if (!emprestimoChaves.equals(other.emprestimoChaves))
			return false;
		if (endereco == null) {
			if (other.endereco != null)
				return false;
		} else if (!endereco.equals(other.endereco))
			return false;
		if (enderecos == null) {
			if (other.enderecos != null)
				return false;
		} else if (!enderecos.equals(other.enderecos))
			return false;
		if (fiadors == null) {
			if (other.fiadors != null)
				return false;
		} else if (!fiadors.equals(other.fiadors))
			return false;
		if (funcionario == null) {
			if (other.funcionario != null)
				return false;
		} else if (!funcionario.equals(other.funcionario))
			return false;
		if (historicoPessoas == null) {
			if (other.historicoPessoas != null)
				return false;
		} else if (!historicoPessoas.equals(other.historicoPessoas))
			return false;
		if (imovelDesejados == null) {
			if (other.imovelDesejados != null)
				return false;
		} else if (!imovelDesejados.equals(other.imovelDesejados))
			return false;
		if (locacaos == null) {
			if (other.locacaos != null)
				return false;
		} else if (!locacaos.equals(other.locacaos))
			return false;
		if (pesConjugue == null) {
			if (other.pesConjugue != null)
				return false;
		} else if (!pesConjugue.equals(other.pesConjugue))
			return false;
		if (pesConjugueCpf == null) {
			if (other.pesConjugueCpf != null)
				return false;
		} else if (!pesConjugueCpf.equals(other.pesConjugueCpf))
			return false;
		if (pesConjugueRg == null) {
			if (other.pesConjugueRg != null)
				return false;
		} else if (!pesConjugueRg.equals(other.pesConjugueRg))
			return false;
		if (pesCpfCnpj == null) {
			if (other.pesCpfCnpj != null)
				return false;
		} else if (!pesCpfCnpj.equals(other.pesCpfCnpj))
			return false;
		if (pesDataAtualizacao == null) {
			if (other.pesDataAtualizacao != null)
				return false;
		} else if (!pesDataAtualizacao.equals(other.pesDataAtualizacao))
			return false;
		if (pesDataCadastro == null) {
			if (other.pesDataCadastro != null)
				return false;
		} else if (!pesDataCadastro.equals(other.pesDataCadastro))
			return false;
		if (pesDataNasc == null) {
			if (other.pesDataNasc != null)
				return false;
		} else if (!pesDataNasc.equals(other.pesDataNasc))
			return false;
		if (pesEnderecoCorrespondencia == null) {
			if (other.pesEnderecoCorrespondencia != null)
				return false;
		} else if (!pesEnderecoCorrespondencia
				.equals(other.pesEnderecoCorrespondencia))
			return false;
		if (pesEstadoCivil == null) {
			if (other.pesEstadoCivil != null)
				return false;
		} else if (!pesEstadoCivil.equals(other.pesEstadoCivil))
			return false;
		if (pesFaturamento == null) {
			if (other.pesFaturamento != null)
				return false;
		} else if (!pesFaturamento.equals(other.pesFaturamento))
			return false;
		if (pesFiador == null) {
			if (other.pesFiador != null)
				return false;
		} else if (!pesFiador.equals(other.pesFiador))
			return false;
		if (pesFoto == null) {
			if (other.pesFoto != null)
				return false;
		} else if (!pesFoto.equals(other.pesFoto))
			return false;
		if (pesFuncionario == null) {
			if (other.pesFuncionario != null)
				return false;
		} else if (!pesFuncionario.equals(other.pesFuncionario))
			return false;
		if (pesId != other.pesId)
			return false;
		if (pesIdEnderecoCorrespondencia == null) {
			if (other.pesIdEnderecoCorrespondencia != null)
				return false;
		} else if (!pesIdEnderecoCorrespondencia
				.equals(other.pesIdEnderecoCorrespondencia))
			return false;
		if (pesIm == null) {
			if (other.pesIm != null)
				return false;
		} else if (!pesIm.equals(other.pesIm))
			return false;
		if (pesInquilino == null) {
			if (other.pesInquilino != null)
				return false;
		} else if (!pesInquilino.equals(other.pesInquilino))
			return false;
		if (pesLocatarioSolidario == null) {
			if (other.pesLocatarioSolidario != null)
				return false;
		} else if (!pesLocatarioSolidario.equals(other.pesLocatarioSolidario))
			return false;
		if (pesNacionalidade == null) {
			if (other.pesNacionalidade != null)
				return false;
		} else if (!pesNacionalidade.equals(other.pesNacionalidade))
			return false;
		if (pesNaturalidade == null) {
			if (other.pesNaturalidade != null)
				return false;
		} else if (!pesNaturalidade.equals(other.pesNaturalidade))
			return false;
		if (pesNome == null) {
			if (other.pesNome != null)
				return false;
		} else if (!pesNome.equals(other.pesNome))
			return false;
		if (pesNomeFantasiaApelido == null) {
			if (other.pesNomeFantasiaApelido != null)
				return false;
		} else if (!pesNomeFantasiaApelido.equals(other.pesNomeFantasiaApelido))
			return false;
		if (pesObservacao == null) {
			if (other.pesObservacao != null)
				return false;
		} else if (!pesObservacao.equals(other.pesObservacao))
			return false;
		if (pesPreCadastro == null) {
			if (other.pesPreCadastro != null)
				return false;
		} else if (!pesPreCadastro.equals(other.pesPreCadastro))
			return false;
		if (pesProfissao == null) {
			if (other.pesProfissao != null)
				return false;
		} else if (!pesProfissao.equals(other.pesProfissao))
			return false;
		if (pesProprietario == null) {
			if (other.pesProprietario != null)
				return false;
		} else if (!pesProprietario.equals(other.pesProprietario))
			return false;
		if (pesQtdFilho == null) {
			if (other.pesQtdFilho != null)
				return false;
		} else if (!pesQtdFilho.equals(other.pesQtdFilho))
			return false;
		if (pesQtdVeiculo == null) {
			if (other.pesQtdVeiculo != null)
				return false;
		} else if (!pesQtdVeiculo.equals(other.pesQtdVeiculo))
			return false;
		if (pesRgIe == null) {
			if (other.pesRgIe != null)
				return false;
		} else if (!pesRgIe.equals(other.pesRgIe))
			return false;
		if (pesSexo == null) {
			if (other.pesSexo != null)
				return false;
		} else if (!pesSexo.equals(other.pesSexo))
			return false;
		if (pesTipo == null) {
			if (other.pesTipo != null)
				return false;
		} else if (!pesTipo.equals(other.pesTipo))
			return false;
		if (pesTipoLocatario == null) {
			if (other.pesTipoLocatario != null)
				return false;
		} else if (!pesTipoLocatario.equals(other.pesTipoLocatario))
			return false;
		if (propostas == null) {
			if (other.propostas != null)
				return false;
		} else if (!propostas.equals(other.propostas))
			return false;
		if (proprietarios == null) {
			if (other.proprietarios != null)
				return false;
		} else if (!proprietarios.equals(other.proprietarios))
			return false;
		if (ramoatuacao == null) {
			if (other.ramoatuacao != null)
				return false;
		} else if (!ramoatuacao.equals(other.ramoatuacao))
			return false;
		if (referenciapessoals == null) {
			if (other.referenciapessoals != null)
				return false;
		} else if (!referenciapessoals.equals(other.referenciapessoals))
			return false;
		if (telefones == null) {
			if (other.telefones != null)
				return false;
		} else if (!telefones.equals(other.telefones))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Pessoa [pesId=" + pesId + "]";
	}



}
