package br.com.locadora.modelo;

// Generated 30/04/2014 09:22:25 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;

/**
 * Vistoria generated by hbm2java
 */
@Audited
@Entity
@Table(name = "VISTORIA", catalog = "renovarsistemas")
@AuditTable(value="VISTORIA", schema="log", catalog="renovarsistemas")
public class Vistoria implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1253389408991884378L;
	private int visId;
	private Imovel imovel;
	private Funcionario funcionario;
	private Date visDataVisita;
	private Character visPendente;
	private Date visDataAgenda;
	private String visObservacao;
	private Set<Locacao> locacaos = new HashSet<Locacao>(0);

	public Vistoria() {
	}

	public Vistoria(int visId, Imovel imovel, Funcionario funcionario) {
		this.visId = visId;
		this.imovel = imovel;
		this.funcionario = funcionario;
	}

	public Vistoria(int visId, Imovel imovel, Funcionario funcionario,
			Date visDataVisita, Character visPendente, Date visDataAgenda,
			String visObservacao, Set<Locacao> locacaos) {
		this.visId = visId;
		this.imovel = imovel;
		this.funcionario = funcionario;
		this.visDataVisita = visDataVisita;
		this.visPendente = visPendente;
		this.visDataAgenda = visDataAgenda;
		this.visObservacao = visObservacao;
		this.locacaos = locacaos;
	}

	@Id
	@GeneratedValue
	@Column(name = "VIS_ID", unique = true, nullable = false)
	public int getVisId() {
		return this.visId;
	}

	public void setVisId(int visId) {
		this.visId = visId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IMO_ID", nullable = false)
	public Imovel getImovel() {
		return this.imovel;
	}

	public void setImovel(Imovel imovel) {
		this.imovel = imovel;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PES_ID", nullable = false)
	public Funcionario getFuncionario() {
		return this.funcionario;
	}

	public void setFuncionario(Funcionario funcionario) {
		this.funcionario = funcionario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VIS_DATA_VISITA", length = 23)
	public Date getVisDataVisita() {
		return this.visDataVisita;
	}

	public void setVisDataVisita(Date visDataVisita) {
		this.visDataVisita = visDataVisita;
	}

	@Column(name = "VIS_PENDENTE", length = 1)
	public Character getVisPendente() {
		return this.visPendente;
	}

	public void setVisPendente(Character visPendente) {
		this.visPendente = visPendente;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VIS_DATA_AGENDA", length = 23)
	public Date getVisDataAgenda() {
		return this.visDataAgenda;
	}

	public void setVisDataAgenda(Date visDataAgenda) {
		this.visDataAgenda = visDataAgenda;
	}

	@Column(name = "VIS_OBSERVACAO", length = 200)
	public String getVisObservacao() {
		return this.visObservacao;
	}

	public void setVisObservacao(String visObservacao) {
		this.visObservacao = visObservacao;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "vistoria")
	@NotAudited
	public Set<Locacao> getLocacaos() {
		return this.locacaos;
	}

	public void setLocacaos(Set<Locacao> locacaos) {
		this.locacaos = locacaos;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((funcionario == null) ? 0 : funcionario.hashCode());
		result = prime * result + ((imovel == null) ? 0 : imovel.hashCode());
		result = prime * result
				+ ((locacaos == null) ? 0 : locacaos.hashCode());
		result = prime * result
				+ ((visDataAgenda == null) ? 0 : visDataAgenda.hashCode());
		result = prime * result
				+ ((visDataVisita == null) ? 0 : visDataVisita.hashCode());
		result = prime * result + visId;
		result = prime * result
				+ ((visObservacao == null) ? 0 : visObservacao.hashCode());
		result = prime * result
				+ ((visPendente == null) ? 0 : visPendente.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Vistoria other = (Vistoria) obj;
		if (funcionario == null) {
			if (other.funcionario != null)
				return false;
		} else if (!funcionario.equals(other.funcionario))
			return false;
		if (imovel == null) {
			if (other.imovel != null)
				return false;
		} else if (!imovel.equals(other.imovel))
			return false;
		if (locacaos == null) {
			if (other.locacaos != null)
				return false;
		} else if (!locacaos.equals(other.locacaos))
			return false;
		if (visDataAgenda == null) {
			if (other.visDataAgenda != null)
				return false;
		} else if (!visDataAgenda.equals(other.visDataAgenda))
			return false;
		if (visDataVisita == null) {
			if (other.visDataVisita != null)
				return false;
		} else if (!visDataVisita.equals(other.visDataVisita))
			return false;
		if (visId != other.visId)
			return false;
		if (visObservacao == null) {
			if (other.visObservacao != null)
				return false;
		} else if (!visObservacao.equals(other.visObservacao))
			return false;
		if (visPendente == null) {
			if (other.visPendente != null)
				return false;
		} else if (!visPendente.equals(other.visPendente))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Vistoria [visId=" + visId + "]";
	}

}
